Q1: 
int mul( Node root ) {
    int res;
    if (root == null) return 1;
    else (res = root.val) && (res = root.val ∗ mul ( root.left ) ∗ mul(root.right));
    return res;
}
======================================================
Q2:
void swap ( int x , int y ) {
    int t = x;
    x = y ;
    y = t ;
}
void main ( ) {
    int a [ ] = { 2 , 1 , 0 }; i = 0;
    swap ( i , a[i] ) ;
    cout << i << a[0] << a[1] << a[2];
}

#A: pass by value: 0210
#B: pass by value-result: 2010
#C: pass by ref: 2010
#D: pass by name: 2210 
    (i, a[i]) ->
        t = i -> (t = 0)
        i = a[i] (i = a[0] = 2)
        a[i] = t (a[2] = 0)

======================================================
Q3:
type VECT = array [1..3] of integer ;
VECTPTR = ^VECT;
procedure SUB1;
var A, B: VECT;
P, Q: VECTPTR;
begin
A[1] := 7 ; A[2] := 8 ; A[3] := 9 ;
B[1] := 7 ; B[2] := 8 ; B[3] := 9 ;
P := @A; Q := @B;
SUB2(P, Q) ;
end ;
procedure SUB2(R: VECTPTR; var S : VECTPTR) ;
begin
R^[1] := R^[1] + 10;    // 1 -> A[1] 
S^[1] := S^[1] + 10;    // 2 -> B[1]
if ... then R := S ;    // 3 -> R 
else S := R;            // 4 -> S
end ;

====================================================
Q4:
n := 5 ;
for i := 1 to n do begin
    n := n + 1 ;
    i := i − 1 ;
end

#A: expr2 is protected: inf -> i is descreased by 1 of code and is increased by one of loop
#B: index is protected: inf -> n is increased by 1 each iteration and index is also increased by 1 each iteration
#C: no protected -> n is increased by 1 in code and index is maintained
#D: both index and expr2 are protected: 5 times
